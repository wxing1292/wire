// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cache

import (
	"github.com/google/wire"
	"github.com/wxing1292/wire/common/logger"
	"github.com/wxing1292/wire/common/metrics"
)

// Injectors from wire.go:

func wireCache(logger2 logger.Logger, metrics2 metrics.Metrics) (*CacheImpl, error) {
	cacheImpl := NewCache(metrics2, logger2)
	return cacheImpl, nil
}

// wire.go:

var WireSet = wire.NewSet(wire.Bind(new(Cache), new(*CacheImpl)), StartCache)

func StartCache(logger2 logger.Logger, metrics2 metrics.Metrics,

) (*CacheImpl, error) {
	cache, err := wireCache(logger2, metrics2)
	if err != nil {
		return nil, err
	}

	if err := cache.Start(); err != nil {
		return nil, cache.Stop()
	}
	return cache, nil
}

// TODO: how do we stop it?
func StopCache() {}
