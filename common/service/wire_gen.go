// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package service

import (
	"github.com/google/wire"
	"github.com/wxing1292/wire/common/cache"
	"github.com/wxing1292/wire/common/logger"
	"github.com/wxing1292/wire/common/metrics"
)

// Injectors from wire.go:

func wireService(cache2 cache.Cache, logger2 logger.Logger, metrics2 metrics.Metrics) (*ServiceImpl, error) {
	serviceImpl := NewService(cache2, metrics2, logger2)
	return serviceImpl, nil
}

// wire.go:

var WireSet = wire.NewSet(
	StartService,
)

func StartService(cache2 cache.Cache, logger2 logger.Logger, metrics2 metrics.Metrics,

) (*ServiceImpl, error) {
	service, err := wireService(cache2, logger2, metrics2)
	if err != nil {
		return nil, err
	}

	if err := service.Start(); err != nil {
		return nil, service.Stop()
	}
	return service, nil
}

// TODO: there is no built in compiler support, e.g.
//  try `func stopService()` instead of `func stopService() {}`
//  due to tag `//go:build wireinject`
// TODO: how do we stop it?
func StopService() {}
